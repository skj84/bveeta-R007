#!/usr/bin/env python
#Prompted by Bveeta Mini
#The code generated by chatgpt open ai engine

import rospy
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image

class FaceDetectionNode:
    def __init__(self):
        rospy.init_node('face_detection_node', anonymous=True)
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber('/usb_cam/image_raw', Image, self.image_callback)
        self.image_pub = rospy.Publisher('/face_detection/output_image', Image, queue_size=1)
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    def image_callback(self, data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, 'bgr8')
            gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
            
            for (x, y, w, h) in faces:
                cv2.rectangle(cv_image, (x, y), (x+w, y+h), (255, 0, 0), 2)
            
            self.image_pub.publish(self.bridge.cv2_to_imgmsg(cv_image, 'bgr8'))
        except Exception as e:
            print(e)

if __name__ == '__main__':
    try:
        face_detection_node = FaceDetectionNode()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
